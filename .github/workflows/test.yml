name: test
on:
  push:
  pull_request:
    branches:
      - 'master'
      - 'release-[0-9]+.[0-9]+'
    paths-ignore:
      - 'contrib/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.repository_owner == 'neovim' && github.sha || github.ref_name }}
  cancel-in-progress: true

env:
  ASAN_OPTIONS: detect_leaks=1:check_initialization_order=1:log_path=${{ github.workspace }}/build/log/asan:intercept_tls_get_addr=0
  BIN_DIR: ${{ github.workspace }}/bin
  BUILD_DIR: ${{ github.workspace }}/build
  INSTALL_PREFIX: ${{ github.workspace }}/nvim-install
  LOG_DIR: ${{ github.workspace }}/build/log
  NVIM_LOG_FILE: ${{ github.workspace }}/build/.nvimlog
  TSAN_OPTIONS: log_path=${{ github.workspace }}/build/log/tsan
  UBSAN_OPTIONS: log_path=${{ github.workspace }}/build/log/ubsan
  VALGRIND_LOG: ${{ github.workspace }}/build/log/valgrind-%p.log
  TEST_FILE: test/functional/plugin/lsp_spec.lua
  TEST_FILTER: vim.lsp._watchfiles

jobs:
  posix:
    name: ${{ matrix.runner }} ${{ matrix.flavor }} (cc=${{ matrix.cc }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - flavor: asan
            cc: clang
            runner: ubuntu-22.04
            flags: -D ENABLE_ASAN_UBSAN=ON
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 45
    env:
      CC: ${{ matrix.cc }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up environment
        run: |
          ulimit -c unlimited
          echo "$BIN_DIR" >> $GITHUB_PATH

      - name: Create log dir
        run: mkdir -p "$LOG_DIR"

      - name: Install dependencies
        run: ./.github/scripts/install_deps.sh --test

      - name: Set up interpreter packages
        run: |
          # Use default CC to avoid compilation problems when installing Python modules.
          echo "Install neovim module for Python."
          CC=cc python3 -m pip -q install --user --upgrade pynvim

          echo "Install neovim RubyGem."
          gem install --no-document --bindir "$BIN_DIR" --user-install --pre neovim

          echo "Install neovim npm package"
          npm install -g neovim
          npm link neovim

          if [[ $RUNNER_OS != macOS ]]; then
            sudo cpanm -n Neovim::Ext || cat "$HOME/.cpanm/build.log"
            perl -W -e 'use Neovim::Ext; print $Neovim::Ext::VERSION'
          fi

      - uses: ./.github/actions/cache

      - name: Build third-party deps
        run: |
          cmake -S cmake.deps -B .deps -G Ninja ${{ matrix.deps_flags }}
          cmake --build .deps

      - name: Build
        run: |
          cmake --preset ci -D CMAKE_INSTALL_PREFIX:PATH=$INSTALL_PREFIX ${{ matrix.flags }}
          cmake --build build

      - if: "!cancelled()"
        name: Determine if run should be aborted
        id: abort_job
        run: echo "status=${{ job.status }}" >> $GITHUB_OUTPUT

      - if: success() || failure() && steps.abort_job.outputs.status == 'success'
        name: Functionaltest
        timeout-minutes: 20
        run: cmake --build build --target functionaltest
      - if: success() || failure() && steps.abort_job.outputs.status == 'success'
        name: Show logs
        run: cat $(find "$LOG_DIR" -type f)
